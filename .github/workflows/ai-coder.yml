name: AI Coder (manual)

on:
  workflow_dispatch:
    inputs:
      task:
        description: "Describe what you want the AI to build"
        required: true

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ai-coder-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ai-coder:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install -r tools/requirements.txt

      - name: Run AI Coder
        id: ai
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
          TASK: ${{ inputs.task }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: python tools/ai_coder.py

      - name: Validate any changed workflow files
        if: always()
        run: |
          set -e
          CHANGED=$(git ls-files -m -o --exclude-standard | grep -E '^\.github/workflows/.*-ci\.yml$' || true)
          if [ -z "$CHANGED" ]; then
            echo "No *-ci.yml workflow changes detected."
            exit 0
          fi
          echo "Changed workflow files:"
          echo "$CHANGED"
          curl -sSL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash -s -- -b .
          for f in $CHANGED; do
            echo "Validating $f"
            ./actionlint -color -shellcheck= -pyflakes= "$f"
          done

      - name: Ensure at least one changed file (always)
        if: always()
        run: |
          set -e
          mkdir -p tools
          echo "run $GITHUB_RUN_ID $(date -u +%FT%TZ)" >> tools/.ai-keepalive.txt

      - name: Show what changed
        if: always()
        run: |
          echo "---- git status ----"; git status --porcelain || true
          echo "---- git diff --stat ----"; git diff --stat || true
          echo "---- ls -la top ----"; ls -la || true
          echo "AI step outcome: ${{ steps.ai.outcome }}"

      - name: Commit & push branch (always)
        if: always()
        env:
          BRANCH: ai/${{ github.run_id }}
          COMMIT_MSG: ${{ inputs.task }}
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -B "$BRANCH"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit; touching marker"
            printf 'touch %s\n' "$(date -u +%FT%TZ)" >> tools/.ai-touch.txt
            git add tools/.ai-touch.txt
          fi
          printf 'ai: %s\n' "$COMMIT_MSG" > .git/AI_COMMIT_MSG
          git commit -F .git/AI_COMMIT_MSG
          git push -u origin "$BRANCH"

      - name: Open PR
        if: always()
        id: pr
        uses: actions/github-script@v7
        env:
          PR_TITLE_TASK: ${{ inputs.task }}
          AI_OUTCOME: ${{ steps.ai.outcome }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const branch = `ai/${process.env.GITHUB_RUN_ID}`;
            const title  = `AI: ${process.env.PR_TITLE_TASK}`;
            const body   = [
              'This PR was generated by the AI Coder workflow.',
              '',
              `**Task:** ${process.env.PR_TITLE_TASK}`,
              `AI step outcome: ${process.env.AI_OUTCOME || 'unknown'}`
            ].join('\n');
            try {
              const res = await github.rest.pulls.create({
                owner,
                repo,
                title,
                head: branch,
                base: 'main',
                body
              });
              core.setOutput('url', res.data.html_url);
            } catch (e) {
              if (e.status === 422) {
                const list = await github.rest.pulls.list({
                  owner, repo, state: 'open', head: `${owner}:${branch}`
                });
                if (list.data.length) {
                  core.setOutput('url', list.data[0].html_url);
                } else {
                  core.setFailed(`Failed to create PR and none found: ${e.message}`);
                }
              } else {
                core.setFailed(e.message);
              }
            }

      - name: Print PR URL
        if: always()
        run: echo "pull-request-url=${{ steps.pr.outputs.url }}"
